https://leetcode.com/problems/decode-ways/
// class Solution {
// public:
//     int numDecodings(string s) {
//         int n = s.length();
//         if(s[0]=='0'){
//             return 0;
//         }
//         vector<int>dp(n+1,0);
//         dp[0]=1;
//         dp[1]=1;
//         for(int i=1;i<n;i++){
//             if(s[i]!='0'){
//                 dp[i+1]=dp[i];
//             }
//             int num = (s[i]-'0')+(s[i-1]-'0')*10;
//             if(num >=10 && num<=26){
//                 dp[i+1]=dp[i+1]+dp[i-1];
//             }
//         }
//         return dp[n];
//     }
// };

// class Solution {
// public:
//     int numDecodings(string s) {
//         int n = s.length();
//         if(s[0]=='0'){
//             return 0;
//         }
//         int curr=1;
//         int p=1;
//         int pp=1;
//         for(int i=1;i<n;i++){
//             curr=0;
//             if(s[i]!='0'){
//                 curr=p;
//             }
//             int num = (s[i]-'0')+(s[i-1]-'0')*10;
//             if(num >=10 && num<=26){
//                 curr = curr + pp;
//             }
//             pp=p;
//             p=curr;
//         }
//         return curr;
//     }
// };


class Solution {
public:
    int helper(string &s,int i,map<int,int>&m){
         if(m.find(i)!=m.end()){
            return m[i];
        }
        if(i>=s.length()){
            return 1;
        }
        int ans=0;
        if(s[i]=='0'){
            return 0;
            
        }
//         if(i==s.length()-1){
//             return 1;
//         }
        
            ans = helper(s,i+1,m);
        
        if(i+1<s.length()){
          int num = (s[i+1]-'0')+(s[i]-'0')*10;
            if(num >=10 && num<=26){
                ans = ans + helper(s,i+2,m);
            }
          
        }
        
        m[i]=ans;
        return ans;
        
    }
    int numDecodings(string s) {
       
        map<int,int>m;
        int ans=helper(s,0,m);
        return ans;
    }
};
